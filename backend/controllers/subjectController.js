const db = require('../config/db');
const { QueryTypes } = require('sequelize');
const createError = require('http-errors');

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
const getAllSubjects = async (req, res, next) => {
  try {
    const query = 'SELECT * FROM tb_subject ORDER BY sub_code ASC';
    const subjects = await db.query(query, { type: QueryTypes.SELECT });

    res.json({
      success: true,
      data: subjects
    });
  } catch (err) {
    next(err);
  }
};

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏ä‡∏≤‡∏ï‡∏≤‡∏°‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤
const getSubjectByCode = async (req, res) => {
  let { sub_code } = req.params;
  console.log("Received sub_code:", sub_code); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö

  try {
    if (!sub_code) {
      return res.status(400).json({ error: "sub_code is required" });
    }

    sub_code = sub_code.trim();

    console.log("üîπ sub_code received:", sub_code);

    const subjectQuery = 'SELECT * FROM tb_subject WHERE sub_code = ?';
    const docQuery = 'SELECT * FROM tb_files WHERE sub_code = :sub_code';
    const vdoQuery = 'SELECT * FROM tb_vdo WHERE sub_code = :sub_code';

    console.log("üîπ Querying tb_subject for sub_code:", sub_code);

const [subjectResults] = await db.query(subjectQuery, {
  replacements: { sub_code },
  type: QueryTypes.SELECT,
});

console.log("üîπ Subject results:", subjectResults); // ‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•


    if (!subjectResults.length) {
      return res.status(404).json({ error: "Subject not found" });
    }

    const [fileResults] = await db.query(docQuery, {
      replacements: { sub_code },
      type: QueryTypes.SELECT,
    });

    const [vdoResults] = await db.query(vdoQuery, {
      replacements: { sub_code },
      type: QueryTypes.SELECT,
    });

    res.json({
      success: true,
      data: {
        subject: subjectResults[0],
        documents: fileResults || [],
        videos: vdoResults || [],
      },
    });

  } catch (err) {
    console.error("‚ùå Error in getSubjectByCode:", err);
    res.status(500).json({ error: err.message || "Internal Server Error" });
  }
};








// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏ä‡∏≤‡πÉ‡∏´‡∏°‡πà
const createSubject = async (req, res, next) => {
  const { sub_code, sub_name, sub_program, sub_unit, sub_term, sub_teacher } = req.body;

  try {
    const existingSubject = await db.query('SELECT * FROM tb_subject WHERE sub_code = ?', {
      replacements: [sub_code],
      type: QueryTypes.SELECT,
    });

    if (existingSubject.length) {
      throw createError(400, '‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß');
    }

    const query = 'INSERT INTO tb_subject (sub_code, sub_name, sub_program, sub_unit, sub_term, sub_teacher) VALUES (?, ?, ?, ?, ?, ?)';
    await db.query(query, {
      replacements: [sub_code, sub_name, sub_program, sub_unit, sub_term, sub_teacher],
      type: QueryTypes.INSERT,
    });

    res.status(201).json({ 
      success: true,
      message: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
    });
  } catch (err) {
    next(err);
  }
};

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤
const updateSubject = async (req, res) => {
  const { id } = req.params;
  let { sub_code, sub_name, sub_program, sub_unit, sub_term, sub_teacher } = JSON.parse(JSON.stringify(req.body));

  console.log("üì• Cleaned Request Body:", { sub_code, sub_name, sub_program, sub_unit, sub_term, sub_teacher });

  if (!sub_code || !sub_name || sub_unit === undefined || !sub_term || !sub_teacher) {
      return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö" });
  }

  try {
      const query = `
          UPDATE tb_subject
          SET sub_code = ?, sub_name = ?, sub_program = ?, sub_unit = ?, sub_term = ?, sub_teacher = ?
          WHERE id = ?
      `;
      const values = [sub_code, sub_name, sub_program || null, sub_unit, sub_term, sub_teacher, id];

      console.log("üöÄ Executing query:", query, "with values:", values);

      const result = await db.query(query, {
          replacements: values,
          type: QueryTypes.UPDATE
      });

      console.log("‚úÖ Query Result:", result);

      if (result[1] === 0) {
          return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤" });
      }

      res.json({ message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (error) {
      console.error("‚ùå Error updating subject:", error);
      res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå", error });
  }
};





// ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤
const deleteSubject = async (req, res, next) => {
  const { id } = req.params;
  console.log("Deleting subject with ID:", id);

  try {
    const query = 'DELETE FROM tb_subject WHERE id = ?';
    const result = await db.query(query, {
      replacements: [id],
      type: QueryTypes.RAW, // ‡πÉ‡∏ä‡πâ QueryTypes.RAW ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤
    });

    console.log("Delete Result:", result); // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å db.query()

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!result || result[0]?.affectedRows === 0) {
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö' });
    }

    res.json({ success: true, message: '‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });

  } catch (err) {
    console.error("Error deleting subject:", err);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå', error: err.message });
  }
};

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏ä‡∏≤‡∏ï‡∏≤‡∏°‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤ ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô‡πÜ (‡πÑ‡∏ü‡∏•‡πå, ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠)
const getDataSubject = async (req, res, next) => {
  let { sub_code } = req.params;
  console.log("Received sub_code:", sub_code); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö

  try {
    if (!sub_code) {
      return res.status(400).json({ error: "sub_code is required" });
    }

    sub_code = sub_code.trim();

    console.log("üîπ sub_code received:", sub_code);

    // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏ä‡∏≤
    const subjectQuery = 'SELECT * FROM tb_subject WHERE sub_code = :sub_code';
    const docQuery = 'SELECT * FROM tb_files WHERE sub_code = :sub_code';
    const vdoQuery = 'SELECT * FROM tb_vdo WHERE sub_code = :sub_code';

    console.log("üîπ Querying tb_subject for sub_code:", sub_code);

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏ä‡∏≤‡∏à‡∏≤‡∏Å tb_subject
    const [subjectResults] = await db.query(subjectQuery, {
      replacements: { sub_code },
      type: QueryTypes.SELECT,
    });

    console.log("üîπ Subject results:", subjectResults); // ‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    
    

    if (!subjectResults || subjectResults.length === 0) {
      return res.status(404).json({ error: "Subject not found" });
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å tb_files
    const [fileResults] = await db.query(docQuery, {
      replacements: { sub_code },
      type: QueryTypes.SELECT,
    });
    console.log("üîπ docQuery results:", fileResults); // ‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å tb_vdo
    const [vdoResults] = await db.query(vdoQuery, {
      replacements: { sub_code },
      type: QueryTypes.SELECT,
    });
    console.log("üîπ vdoQuery results:", vdoResults); // ‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á client
    res.json({
      success: true,
      data: {
        subject: subjectResults || [], // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏ä‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÅ‡∏£‡∏Å
        documents: fileResults || [], // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏≤‡∏Å‡∏°‡∏µ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô array ‡∏ß‡πà‡∏≤‡∏á‡πÜ
        videos: vdoResults || [], // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏´‡∏≤‡∏Å‡∏°‡∏µ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô array ‡∏ß‡πà‡∏≤‡∏á‡πÜ
      },
    });

  } catch (err) {
    console.error("‚ùå Error in getDataSubject:", err);
    res.status(500).json({ error: err.message || "Internal Server Error" });
  }
};


// ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤
const checkPermissionSub = async (req, res, next) => {
  const { std_code, sub_code } = req.params;

  console.log("Received std_code and sub_code:", { std_code, sub_code });

  try {
    if (!std_code || !sub_code) {
      return res.status(400).json({ error: "Both std_code and sub_code are required" });
    }

    const query = `
      SELECT sub_code, std_code, status
      FROM tb_subject_list
      WHERE std_code = :std_code AND sub_code = :sub_code
    `;

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å tb_subject_list
    const [results] = await db.query(query, {
      replacements: { std_code, sub_code },
      type: QueryTypes.SELECT,
    });

    console.log("üîπ Query result:", results);

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô tb_subject_list
    if (!results || results.length === 0) {
      return res.status(200).json({ status: "inactive" }); // ‡∏™‡πà‡∏á status ‡πÄ‡∏õ‡πá‡∏ô inactive ‡πÅ‡∏ó‡∏ô error
    }
    

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    res.json({
      success: true,
      data: results[0],  // ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
    });
  } catch (err) {
    console.error("‚ùå Error in checkPermissionSub:", err);
    res.status(500).json({ error: err.message || "Internal Server Error" });
  }
};

module.exports = { getDataSubject, getAllSubjects, getSubjectByCode, createSubject, updateSubject, deleteSubject, checkPermissionSub };

